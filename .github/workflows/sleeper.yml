name: Sleeper sync (multi-league)

on:
  schedule:
    - cron: "0 * * * *"   # hourly UTC
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      LEAGUES: "1265837618587762688 1181689020258160640"  # non-keeper, keeper
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Export all leagues
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p docs

          # Prepare a small Python script once; reuse it in the loop (build HTML mirror)
          cat > /tmp/mirror.py << 'PY'
          import os, pathlib, html
          lid = os.environ["CUR_LID"]
          p = pathlib.Path(f'docs/league_state_{lid}.json')
          data = p.read_text(encoding='utf-8')
          html_doc = (
              '<!doctype html><meta charset="utf-8"><title>league_state</title>'
              f'<h1>league_state_{lid}.json (mirror)</h1><pre>' + html.escape(data) + '</pre>'
          )
          pathlib.Path(f'docs/league_state_{lid}.html').write_text(html_doc, encoding='utf-8')
          PY

          for LID in $LEAGUES; do
            echo "==> Exporting $LID"
            python sleeper_sync.py --league "$LID" --out ./docs
            FILE=$(ls ./docs/league_${LID}_*/league_state.json | head -n 1)
            cp "$FILE" "./docs/league_state_${LID}.json"

            # Also publish draft picks so we can identify keepers from raw file if needed
            if ls ./docs/league_${LID}_*/draft_picks.json >/dev/null 2>&1; then
              FILE2=$(ls ./docs/league_${LID}_*/draft_picks.json | head -n 1)
              cp "$FILE2" "./docs/draft_picks_${LID}.json"
            fi

            CUR_LID="$LID" python /tmp/mirror.py
          done

      - name: Build index.html
        run: |
          python - << 'PY'
          import json, pathlib, html
          docs = pathlib.Path('docs'); docs.mkdir(exist_ok=True)
          rows=[]
          for p in sorted(docs.glob('league_state_*.json')):
              data=json.loads(p.read_text('utf-8'))
              lid=data.get('league',{}).get('league_id')
              name=data.get('league',{}).get('name','League')
              ts=data.get('generated_at','')
              picks = f'draft_picks_{lid}.json'
              have_picks = docs.joinpath(picks).exists()
              rows.append((name,lid,p.name,f'league_state_{lid}.html',ts,have_picks,picks))
          out=['<!doctype html>','<meta charset="utf-8">','<title>SleeperAgent export</title>','<h1>SleeperAgent export</h1>','<ul>']
          for name,lid,json_name,html_name,ts,have_picks,picks in rows:
              pick_link = f' | <a href="{picks}">draft_picks</a>' if have_picks else ''
              out.append(f'<li>{html.escape(name)} (ID {lid}) — updated <code>{html.escape(ts)}</code> — <a href="{json_name}">JSON</a> | <a href="{html_name}">HTML</a>'+pick_link+'</li>')
          out.append('</ul>')
          docs.joinpath('index.html').write_text('\n'.join(out), encoding='utf-8')
          PY

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add -A
          git commit -m "update league data (both leagues + picks)" || echo "No changes"
          git push
