name: Sleeper sync (multi-league)

on:
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      LEAGUES: "1265837618587762688 1181689020258160640"  # non-keeper, keeper
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Export all leagues
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p docs

          # Build HTML mirror helper once; reuse in loop
          cat > /tmp/mirror.py << 'PY'
          import os, pathlib, html, json
          lid = os.environ["CUR_LID"]
          p = pathlib.Path(f'docs/league_{lid}/state.json')
          data = p.read_text(encoding='utf-8')
          html_doc = (
              '<!doctype html><meta charset="utf-8"><title>league_state</title>'
              f'<h1>league_state_{lid}.json (mirror)</h1><pre>' + html.escape(data) + '</pre>'
          )
          pathlib.Path(f'docs/league_state_{lid}.html').write_text(html_doc, encoding='utf-8')
          PY

          for LID in $LEAGUES; do
            echo "==> Exporting $LID"

            # 1) Clear old per-run folders for this league
            rm -rf ./docs/league_${LID}_*/

            # 2) Export fresh snapshot (per-run folder)
            python sleeper_sync.py --league "$LID" --out ./docs

            # 3) Locate newest per-run folder and sync to stable docs/league_<ID>/
            RUN_DIR=$(ls -dtd ./docs/league_${LID}_*/ | head -n 1)
            STABLE_DIR=./docs/league_${LID}
            rm -rf "$STABLE_DIR"
            mkdir -p "$STABLE_DIR"
            rsync -a "$RUN_DIR" "$STABLE_DIR/.." >/dev/null 2>&1 || cp -R "$RUN_DIR" "$STABLE_DIR"  # fallback if rsync unavailable

            # 4) Publish top-level shortcuts (backward compatibility)
            cp "$STABLE_DIR/state.json" "./docs/league_state_${LID}.json"
            if [ -f "$STABLE_DIR/draft_picks.json" ]; then
              cp "$STABLE_DIR/draft_picks.json" "./docs/draft_picks_${LID}.json"
            fi

            # 5) Build HTML mirror for Pages
            CUR_LID="$LID" python /tmp/mirror.py
          done

      - name: Show docs contents (debug)
        run: ls -lR docs

      - name: Build index.html
        run: |
          python - << 'PY'
          import json, pathlib, html
          docs = pathlib.Path('docs'); docs.mkdir(exist_ok=True)
          rows=[]
          for league_dir in sorted(docs.glob('league_*')):
              if league_dir.is_dir() and league_dir.name.count('_')==1:  # matches league_<ID>
                  state_p = league_dir / 'state.json'
                  if not state_p.exists():
                      continue
                  data=json.loads(state_p.read_text('utf-8'))
                  lid=data.get('league',{}).get('league_id')
                  name=data.get('league',{}).get('name','League')
                  ts=data.get('generated_at','')
                  rows.append((name,lid,f'league_{lid}/state.json',f'league_state_{lid}.html'))
          out=['<!doctype html>','<meta charset="utf-8">','<title>SleeperAgent export</title>','<h1>SleeperAgent export</h1>','<ul>']
          for name,lid,state_link,html_link in rows:
              extras = [
                f'<a href="league_{lid}/teams.json">teams</a>',
                f'<a href="league_{lid}/schedule.json">schedule</a>',
                f'<a href="league_{lid}/transactions.json">transactions</a>',
                f'<a href="league_{lid}/players_min.json">players_min</a>'
              ]
              out.append(f'<li>{html.escape(name)} (ID {lid}) â€” <a href="{state_link}">state.json</a> | '
                         f'<a href="{html_link}">HTML mirror</a> | ' + ' | '.join(extras) + '</li>')
          out.append('</ul>')
          docs.joinpath('index.html').write_text('\n'.join(out), encoding='utf-8')
          PY

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add -A
          git commit -m "normalized publish: league_<ID> API + state shortcuts" || echo "No changes"
          git push
